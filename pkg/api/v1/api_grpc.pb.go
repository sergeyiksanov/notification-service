// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: api/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Email_CreateMessageByUserIds_FullMethodName   = "/Email/CreateMessageByUserIds"
	Email_SendRegisterConfirm_FullMethodName      = "/Email/SendRegisterConfirm"
	Email_SendResetPasswordConfirm_FullMethodName = "/Email/SendResetPasswordConfirm"
)

// EmailClient is the client API for Email service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailClient interface {
	CreateMessageByUserIds(ctx context.Context, in *CreateMessageByUserIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendRegisterConfirm(ctx context.Context, in *SendRegisterConfirmRequest, opts ...grpc.CallOption) (*SendRegisterConfirmResponse, error)
	SendResetPasswordConfirm(ctx context.Context, in *SendResetPasswordConfirmRequest, opts ...grpc.CallOption) (*SendResetPasswordConfirmResponse, error)
}

type emailClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailClient(cc grpc.ClientConnInterface) EmailClient {
	return &emailClient{cc}
}

func (c *emailClient) CreateMessageByUserIds(ctx context.Context, in *CreateMessageByUserIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Email_CreateMessageByUserIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailClient) SendRegisterConfirm(ctx context.Context, in *SendRegisterConfirmRequest, opts ...grpc.CallOption) (*SendRegisterConfirmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendRegisterConfirmResponse)
	err := c.cc.Invoke(ctx, Email_SendRegisterConfirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailClient) SendResetPasswordConfirm(ctx context.Context, in *SendResetPasswordConfirmRequest, opts ...grpc.CallOption) (*SendResetPasswordConfirmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResetPasswordConfirmResponse)
	err := c.cc.Invoke(ctx, Email_SendResetPasswordConfirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServer is the server API for Email service.
// All implementations must embed UnimplementedEmailServer
// for forward compatibility.
type EmailServer interface {
	CreateMessageByUserIds(context.Context, *CreateMessageByUserIdRequest) (*emptypb.Empty, error)
	SendRegisterConfirm(context.Context, *SendRegisterConfirmRequest) (*SendRegisterConfirmResponse, error)
	SendResetPasswordConfirm(context.Context, *SendResetPasswordConfirmRequest) (*SendResetPasswordConfirmResponse, error)
	mustEmbedUnimplementedEmailServer()
}

// UnimplementedEmailServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailServer struct{}

func (UnimplementedEmailServer) CreateMessageByUserIds(context.Context, *CreateMessageByUserIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessageByUserIds not implemented")
}
func (UnimplementedEmailServer) SendRegisterConfirm(context.Context, *SendRegisterConfirmRequest) (*SendRegisterConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegisterConfirm not implemented")
}
func (UnimplementedEmailServer) SendResetPasswordConfirm(context.Context, *SendResetPasswordConfirmRequest) (*SendResetPasswordConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordConfirm not implemented")
}
func (UnimplementedEmailServer) mustEmbedUnimplementedEmailServer() {}
func (UnimplementedEmailServer) testEmbeddedByValue()               {}

// UnsafeEmailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServer will
// result in compilation errors.
type UnsafeEmailServer interface {
	mustEmbedUnimplementedEmailServer()
}

func RegisterEmailServer(s grpc.ServiceRegistrar, srv EmailServer) {
	// If the following call pancis, it indicates UnimplementedEmailServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Email_ServiceDesc, srv)
}

func _Email_CreateMessageByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServer).CreateMessageByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Email_CreateMessageByUserIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServer).CreateMessageByUserIds(ctx, req.(*CreateMessageByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Email_SendRegisterConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRegisterConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServer).SendRegisterConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Email_SendRegisterConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServer).SendRegisterConfirm(ctx, req.(*SendRegisterConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Email_SendResetPasswordConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResetPasswordConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServer).SendResetPasswordConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Email_SendResetPasswordConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServer).SendResetPasswordConfirm(ctx, req.(*SendResetPasswordConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Email_ServiceDesc is the grpc.ServiceDesc for Email service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Email_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Email",
	HandlerType: (*EmailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessageByUserIds",
			Handler:    _Email_CreateMessageByUserIds_Handler,
		},
		{
			MethodName: "SendRegisterConfirm",
			Handler:    _Email_SendRegisterConfirm_Handler,
		},
		{
			MethodName: "SendResetPasswordConfirm",
			Handler:    _Email_SendResetPasswordConfirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api.proto",
}
